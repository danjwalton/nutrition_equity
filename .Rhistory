required.packages <- c("reshape2","ggplot2","WDI","data.table")
lapply(required.packages, require, character.only=T)
wd <- "G:/My Drive/Work/GitHub/nutrition_equity"
wd2 <- "G:/My Drive/Work/GitHub/p20_indicator_time_trends/data/DHSauto"
###Define functions
lorenzdist <- function(data, weights=1,offset=0){
suppressWarnings({
df <- data.table(z=data, p=weights)
df <- df[order(z)]
if(df$p==1){
df$P <- seq(0+1/nrow(df),1,1/nrow(df))
} else {
df$P <- df$p/sum(df$p)
df$P <- cumsum(df$P)
}
df$pos.z <- df$z + offset
df$L <- df$pos.z/sum(df$pos.z)
df$L <- cumsum(df$L)
return(df)
})
}
ginicalc <- function(P,L){
dP <- diff(P)
dL <- diff(L)
fL <- head(L,-1)
dPL <- dP*dL
dPfL <- dP*fL
area <- sum(dPL) + sum(dPfL)
gini <- 1-2*area
return(gini)
}
polarisationcalc <- function(data,weights=1,z,offset=0){
dist <- lorenzdist(data,weights,offset)
data <- data + offset
mu <- weighted.mean(data, weights)
g <- ginicalc(dist$P,dist$L)
z <- z + offset
dist$qdif <- abs(z - dist$pos.z)
q <- min(dist$P[which(dist$qdif==min(dist$qdif))],dist$p[which(dist$qdif==min(dist$qdif))])
dist$pdif <- abs(q - dist$P)
lq <- dist$L[which(dist$pdif==min(dist$pdif))]
b <- q - lq
t <- b + (0.5-q)*(1-z/mu)
gp <- 2*(mu/z)*(2*t-g)
return(gp)
}
###Metadata
setwd(wd)
dhsmeta<- fread("project_data/dhs_meta_data20190524.csv")
dhsmeta<- subset(dhsmeta, Recode.Structure.!="DHS-I")
dhsmeta$Country.[which(dhsmeta$Country.=="Cape Verde")]<-"Cabo Verde"
dhsmeta$Country.[which(dhsmeta$Country.=="Congo")]<-"Congo, Republic of"
dhsmeta$Country.[which(dhsmeta$Country.=="Congo Democratic Republic")]<-"Congo, Democratic Republic of"
dhsmeta$Country.[which(dhsmeta$Country.=="Egypt")]<-"Egypt, Arab Republic of"
dhsmeta$Country.[which(dhsmeta$Country.=="Gambia")]<-"Gambia, The"
dhsmeta$Country.[which(dhsmeta$Country.=="Yemen")]<-"Yemen, Republic of"
names(dhsmeta)[which(names(dhsmeta)=="Country.")] <- "CountryName"
dhsmeta$filename <- paste0(dhsmeta$dhs_cc,"HR",dhsmeta$dhs_recode_code,"DT")
dhsmeta <- dhsmeta[which(!is.na(dhsmeta$dhs_cc)),]
dhsmeta2 <- unique(dhsmeta[,c("CountryName","surveyyr","filename")])
#Generate single datafile with all height-for-age data together
if(!("stuntingrawDHS.RData" %in% list.files("project_data"))){
setwd(wd2)
#Surveys missing the Birth Recode section
missing.br <- c(
"aobr51fl.RData",
"bfbr70fl.RData",
"bubr6hfl.RData",
"kebr7afl.RData",
"lbbr61fl.RData",
"lbbr71fl.RData",
"mdbr71fl.RData",
"mlbr70fl.RData",
"mwbr6hfl.RData",
"mwbr7ifl.RData",
"rwbr6qfl.RData",
"rwbr7afl.RData",
"slbr71fl.RData",
"snbr50fl.RData",
"tgbr71fl.RData",
"tzbr7ifl.RData",
"ugbr72fl.RData"
)
rdatas <- list.files(pattern="*.RData",ignore.case=T)
rdatas <- substr(rdatas,1,nchar(rdatas)-6)
dataList <- list()
dataIndex <- 1
#Iterate through all surveys identified by the DHSmeta scrape
pb <- txtProgressBar(max=nrow(dhsmeta),style=3)
for(i in 1:nrow(dhsmeta2)){
dhsmetasubset <- dhsmeta2[i]
country <- tolower(substr(dhsmetasubset$filename,1,2))
recode <- tolower(substr(dhsmetasubset$filename,3,4))
phase <- tolower(substr(dhsmetasubset$filename,5,6))
subphase <- substr(dhsmeta2$filename,5,5)
rdata_name <- paste0(country,recode,phase,"fl")
#Find matching survey in DHSauto folder; otherwise, skip
if(!(rdata_name %in% rdatas)){ next; }
#Load individual recode
if(exists("data")){rm(data)}
pr_patha <- paste0(country,"pr",phase)
pr_path <- paste0(tolower(pr_patha),"fl.RData")
load(pr_path)
#If individual recode includes height-for-age, keep this. Otherwise, load birth recode and look for height-for-age there.
if(length(names(data)[which(names(data)=="hc70")])==1){
dat <- data.table(V1=data$hc70, V2=data$hv005)
} else {
rm(data)
br_patha <- paste0(country,"br",phase)
br_path <- paste0(tolower(br_patha),"fl.RData")
if(!(br_path %in% missing.br)){
load(br_path)
if(length(names(data)[which(names(data)=="hw5")])){
dat <- data.table(V1=data$hw5, V2=data$v005)
} else { next; }
} else { next; }
}
rm(data)
dat <- dat[complete.cases(dat)]
if(nrow(dat)==0){next;}
dat$V3 <- dhsmetasubset$filename
dataList[[i]] <- dat
setTxtProgressBar(pb,i)
}
data <- rbindlist(dataList)
setwd(wd)
save(data, file="project_data/stuntingrawDHS.RData")
} else {
load("project_data/stuntingrawDHS.RData")
}
data <- data[V1 < 9900]
rawz <- data$V1
weights <- data$V2
rep(1)
offset <- 600
z <- 0
dist <- lorenzdist(rawz,weights,offset)
View(dist)
lorenzdist <- function(raw,weights=1,offset=0){
suppressWarnings({
df <- raw.table(z=raw, p=weights)
df <- df[order(z)]
if(df$p==1){
df$P <- seq(0+1/nrow(df),1,1/nrow(df))
} else {
df$P <- df$p/sum(df$p)
df$P <- cumsum(df$P)
}
df$pos.z <- df$z + offset
df$L <- df$z.off/sum(df$z.off)
df$L <- cumsum(df$L)
return(df)
})
}
ginicalc <- function(P,L){
dP <- diff(P)
dL <- diff(L)
fL <- head(L,-1)
dPL <- dP*dL
dPfL <- dP*fL
area <- sum(dPL) + sum(dPfL)
gini <- 1-2*area
return(gini)
}
polarisationcalc <- function(raw,weights=1,z,offset=0){
dist <- lorenzdist(raw,weights,offset)
raw.off <- raw + offset
mu <- weighted.mean(raw.off, weights)
g <- ginicalc(dist$P,dist$L)
z.off <- z + offset
dist$qdif <- abs(z.off - dist$z.off)
q <- min(dist$P[which(dist$qdif==min(dist$qdif))],dist$p[which(dist$qdif==min(dist$qdif))])
dist$pdif <- abs(q - dist$P)
lq <- dist$L[which(dist$pdif==min(dist$pdif))]
b <- q - lq
t <- b + (0.5-q)*(1-z/mu)
gp <- 2*(mu/z)*(2*t-g)
return(gp)
}
dist <- lorenzdist(raw,weights,offset)
raw <- rawz
rm(rawz)
dist <- lorenzdist(raw,weights,offset)
?raw
input <- raw
rm(raw)
dist <- lorenzdist(input,weights,offset)
###Define functions
lorenzdist <- function(input,weights=1,offset=0){
suppressWarnings({
df <- input.table(z=input, p=weights)
df <- df[order(z)]
if(df$p==1){
df$P <- seq(0+1/nrow(df),1,1/nrow(df))
} else {
df$P <- df$p/sum(df$p)
df$P <- cumsum(df$P)
}
df$pos.z <- df$z + offset
df$L <- df$z.off/sum(df$z.off)
df$L <- cumsum(df$L)
return(df)
})
}
ginicalc <- function(P,L){
dP <- diff(P)
dL <- diff(L)
fL <- head(L,-1)
dPL <- dP*dL
dPfL <- dP*fL
area <- sum(dPL) + sum(dPfL)
gini <- 1-2*area
return(gini)
}
dist <- lorenzdist(input,weights,offset)
###Define functions
lorenzdist <- function(input,weights=1,offset=0){
suppressWarnings({
df <- data.table(z=input, p=weights)
df <- df[order(z)]
if(df$p==1){
df$P <- seq(0+1/nrow(df),1,1/nrow(df))
} else {
df$P <- df$p/sum(df$p)
df$P <- cumsum(df$P)
}
df$pos.z <- df$z + offset
df$L <- df$z.off/sum(df$z.off)
df$L <- cumsum(df$L)
return(df)
})
}
dist <- lorenzdist(input,weights,offset)
input.off <- input + offset
#mu <- weighted.mean(input.off, weights)
g <- ginicalc(dist$P,dist$L)
###Define functions
lorenzdist <- function(input,weights=1,offset=0){
suppressWarnings({
df <- data.table(z=input, p=weights)
df <- df[order(z)]
if(df$p==1){
df$P <- seq(0+1/nrow(df),1,1/nrow(df))
} else {
df$P <- df$p/sum(df$p)
df$P <- cumsum(df$P)
}
df$z.off <- df$z + offset
df$L <- df$z.off/sum(df$z.off)
df$L <- cumsum(df$L)
return(df)
})
}
dist <- lorenzdist(input,weights,offset)
input.off <- input + offset
#mu <- weighted.mean(input.off, weights)
g <- ginicalc(dist$P,dist$L)
z.off <- z + offset
dist$qdif <- abs(z.off - dist$z.off)
q <- min(dist$P[which(dist$qdif==min(dist$qdif))],dist$p[which(dist$qdif==min(dist$qdif))])
dist$pdif <- abs(q - dist$P)
lq <- dist$L[which(dist$pdif==min(dist$pdif))]
?diff
diff(dist$L)/diff(dist$p)
diff(dist$L)/diff(dist$P)
dist$dP <- diff(P)
dist$dP <- diff(dist$P)
dist$dP <- rbind(0,diff(dist$P))
c(0,diff(dist$P))
dist$dP <- c(0,diff(dist$P))
dist$dL <- c(0,diff(dist$L))
View(dist)
dist$grad <- dist$dL/dist$dP
dist <- lorenzdist(input,weights,offset)
View(dist)
input.off <- input + offset
#mu <- weighted.mean(input.off, weights)
g <- ginicalc(dist$P,dist$L)
dist$dP <- c(0,diff(dist$P))
dist$dL <- c(0,diff(dist$L))
dist$grad <- dist$dL/dist$dP
dist[, .I[dist[which(dist$qdif==min(dist$qdif))])]]
dist[, .I[dist[which(dist$qdif==min(dist$qdif))]]]
z.off <- z + offset
dist$qdif <- abs(z.off - dist$z.off)
dist[, .I[dist[which(dist$qdif==min(dist$qdif))]]]
dist[, .I[which(dist$qdif==min(dist$qdif))]]
dist[dist[, .I[which(dist$qdif==min(dist$qdif))]]]
dist <- lorenzdist(input,weights,offset)
input.off <- input + offset
#mu <- weighted.mean(input.off, weights)
g <- ginicalc(dist$P,dist$L)
z.off <- z + offset
dist$qdif <- abs(z.off - dist$z.off)
thresholdset <- dist[dist[, .I[which(dist$qdif==min(dist$qdif))]]]
View(thresholdset)
max(thresholdset$P)-min(thresholdset$P)
(max(thresholdset$L)-min(thresholdset$L))/(max(thresholdset$P)-min(thresholdset$P))
polarisationcalc <- function(input,weights=1,z,offset=0){
dist <- lorenzdist(input,weights,offset)
input.off <- input + offset
#mu <- weighted.mean(input.off, weights)
g <- ginicalc(dist$P,dist$L)
z.off <- z + offset
dist$qdif <- abs(z.off - dist$z.off)
thresholdset <- dist[dist[, .I[which(dist$qdif==min(dist$qdif))]]]
grad <- (max(thresholdset$L)-min(thresholdset$L))/(max(thresholdset$P)-min(thresholdset$P))
b <- q - lq
t <- b + (0.5-q)
gp <- 0.5/grad*(2*t-g)
return(gp)
}
polarisationcalc(input, weights, 0, 600)
polarisationcalc <- function(input,weights=1,z,offset=0){
dist <- lorenzdist(input,weights,offset)
input.off <- input + offset
#mu <- weighted.mean(input.off, weights)
g <- ginicalc(dist$P,dist$L)
z.off <- z + offset
dist$qdif <- abs(z.off - dist$z.off)
thresholdset <- dist[dist[, .I[which(dist$qdif==min(dist$qdif))]]]
grad <- (max(thresholdset$L)-min(thresholdset$L))/(max(thresholdset$P)-min(thresholdset$P))
b <- q - lq
t <- b + (0.5-q)*(1-grad)
gp <- (2/grad)*(2*t-g)
return(gp)
}
polarisationcalc(input, weights, 0, 600)
equity <- data[, .(Gini=ginicalc(lorenzdist(V1,V2,600)$P, lorenzdist(V1,V2,600)$L), Polarisation_0=polarisationcalc(V1,V2,0,600), `Polarisation_-2`=polarisationcalc(V1,V2,-200,600),Mean=weighted.mean(V1,V2)/100), by=.(V3)]
equity <- merge(dhsmeta2, equity, by.x="filename", by.y="V3")
View(equity)
dist <- lorenzdist(input,weights,offset)
input.off <- input + offset
g <- ginicalc(dist$P,dist$L)
z.off <- z + offset
dist$qdif <- abs(z.off - dist$z.off)
thresholdset <- dist[dist[, .I[which(dist$qdif==min(dist$qdif))]]]
grad <- (max(thresholdset$L)-min(thresholdset$L))/(max(thresholdset$P)-min(thresholdset$P))
b <- q - lq
t <- b + (0.5-q)*(1-grad)
(2/grad)*(2*(q-lq)+2*(0.5-q)*(1-grad)-g)
gp <- (2/grad)*(2*t-g)
grad <- 1/((max(thresholdset$L)-min(thresholdset$L))/(max(thresholdset$P)-min(thresholdset$P)))
(2/grad)*(2*(q-lq)+2*(0.5-q)*(1-grad)-g)
grad <- (max(thresholdset$L)-min(thresholdset$L))/(max(thresholdset$P)-min(thresholdset$P))
(2/grad)*(2*(q-lq)+2*(0.5-q)*(1-grad)-g)
mean(diff(dist$L)/diff(dist$P))
diff(dist$L)
mean(diff(thresholdset$L)/thresholdset(dist$P))
mean(diff(thresholdset$L)/diff(thresholdset$P))
(2/grad1)*(2*(q-lq)+2*(0.5-q)*(1-grad1)-g)
grad1 <- mean(diff(thresholdset$L)/diff(thresholdset$P))
(2/grad1)*(2*(q-lq)+2*(0.5-q)*(1-grad1)-g)
scatter.smooth(thresholdset$L, thresholdset$P)
scatter.smooth(dist$L, dist$P)
scatter.smooth(dist$P, dist$L)
coef(lm(thresholdset$L~thresholdset$P))
(max(thresholdset$L)-min(thresholdset$L))/(max(thresholdset$P)-min(thresholdset$P))
coef(lm(thresholdset$L~thresholdset$P))[2]
(2/grad1)*(2*(q-lq)+2*(0.5-q)*(1-grad1)-g)
grad1 <- coef(lm(thresholdset$L~thresholdset$P))[2]
(2/grad1)*(2*(q-lq)+2*(0.5-q)*(1-grad1)-g)
gp <- (2/grad1)*(2*t-g)
equity <- data[, .(Gini=ginicalc(lorenzdist(V1,V2,600)$P, lorenzdist(V1,V2,600)$L), Polarisation_0=polarisationcalc(V1,V2,0,600), `Polarisation_-2`=polarisationcalc(V1,V2,-200,600),Mean=weighted.mean(V1,V2)/100), by=.(V3)]
View(equity)
###Define functions
lorenzdist <- function(input,weights=1,offset=0){
suppressWarnings({
df <- data.table(z=input, p=weights)
df <- df[order(z)]
if(df$p==1){
df$P <- seq(0+1/nrow(df),1,1/nrow(df))
} else {
df$P <- df$p/sum(df$p)
df$P <- cumsum(df$P)
}
df$z.off <- df$z + offset
df$L <- df$z.off/sum(df$z.off)
df$L <- cumsum(df$L)
return(df)
})
}
ginicalc <- function(P,L){
dP <- diff(P)
dL <- diff(L)
fL <- head(L,-1)
dPL <- dP*dL
dPfL <- dP*fL
area <- sum(dPL) + sum(dPfL)
gini <- 1-2*area
return(gini)
}
polarisationcalc <- function(input,weights=1,z,offset=0){
dist <- lorenzdist(input,weights,offset)
input.off <- input + offset
g <- ginicalc(dist$P,dist$L)
z.off <- z + offset
dist$qdif <- abs(z.off - dist$z.off)
thresholdset <- dist[dist[, .I[which(dist$qdif==min(dist$qdif))]]]
grad1 <- coef(lm(thresholdset$L~thresholdset$P))[2]
grad <- (max(thresholdset$L)-min(thresholdset$L))/(max(thresholdset$P)-min(thresholdset$P))
b <- q - lq
t <- b + (0.5-q)*(1-grad1)
gp <- (2/grad1)*(2*t-g)
return(gp)
}
data <- data[V1 < 9900]
equity <- data[, .(Gini=ginicalc(lorenzdist(V1,V2,600)$P, lorenzdist(V1,V2,600)$L), Polarisation_0=polarisationcalc(V1,V2,0,600), `Polarisation_-2`=polarisationcalc(V1,V2,-200,600),Mean=weighted.mean(V1,V2)/100), by=.(V3)]
equity <- merge(dhsmeta2, equity, by.x="filename", by.y="V3")
dist <- lorenzdist(input,weights,offset)
input.off <- input + offset
g <- ginicalc(dist$P,dist$L)
z.off <- z + offset
dist$qdif <- abs(z.off - dist$z.off)
thresholdset <- dist[dist[, .I[which(dist$qdif==min(dist$qdif))]]]
grad1 <- coef(lm(thresholdset$L~thresholdset$P))[2]
grad <- (max(thresholdset$L)-min(thresholdset$L))/(max(thresholdset$P)-min(thresholdset$P))
b <- q - lq
t <- b + (0.5-q)*(1-grad1)
